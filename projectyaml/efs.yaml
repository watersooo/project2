apiVersion: apps/v1
kind: Deployment
metadata:
  name: ap-tomcat-main-2a
  labels:
    main-was: main-app-was-2a
spec:
  replicas: 3
  selector:
    matchLabels:
      main-was: main-app-was-2a
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 1
  template:
    metadata:
      labels:
        main-was: main-app-was-2a
    spec:
      containers:
        - image: 730335352888.dkr.ecr.ap-northeast-2.amazonaws.com/test:v1.3
          name: main-was
          ports:
            - containerPort: 8080
          livenessProbe:
            httpGet:
              path: /
              port: 8080
            initialDelaySeconds: 30
            periodSeconds: 10
          readinessProbe:
            httpGet:
              path: /
              port: 8080
            initialDelaySeconds: 30
            periodSeconds: 10
          resources:
            requests:
              memory: 400Mi
              cpu: 400m
            limits:
              memory: 400Mi
              cpu: 400m
          volumeMounts:
            - name: pvcmain-was
              mountPath: /opt/tomcat/webapps/ROOT
      volumes:
        - name: pvcmain-was
          persistentVolumeClaim:
            claimName: efs-claim  # 여기에서 pvc-was를 efs-claim으로 수정
      nodeSelector:
        main-was: main-app-was-2a

---

apiVersion: v1
kind: PersistentVolume
metadata:
  name: efs-pv
spec:
  capacity:
    storage: 5Gi
  volumeMode: Filesystem
  accessModes:
    - ReadWriteMany
  persistentVolumeReclaimPolicy: Retain
  storageClassName: efs-sc
  csi:
    driver: efs.csi.aws.com
    volumeHandle: fs-072e----6f0a6b71 #여기에 EFS ID 넣기

---

apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: efs-claim
spec:
  accessModes:
    - ReadWriteMany
  storageClassName: efs-sc
  resources:
    requests:
      storage: 5Gi

---

apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  name: efs-sc
provisioner: efs.csi.aws.com
