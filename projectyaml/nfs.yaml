apiVersion: apps/v1
kind: Deployment
metadata:
  name: ap-tomcat-main-2a
  labels:
    main-was: main-app-was-2a
spec:
  replicas: 3
  selector:
    matchLabels:
      main-was: main-app-was-2a
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 1
  template:
    metadata:
      labels:
        main-was: main-app-was-2a
    spec:
      containers:
        - image: 730335352888.dkr.ecr.ap-northeast-2.amazonaws.com/test:v1.3
          name: main-was
          ports:
            - containerPort: 8080
          livenessProbe:
            httpGet:
              path: /
              port: 8080
            initialDelaySeconds: 30
            periodSeconds: 10
          readinessProbe:
            httpGet:
              path: /
              port: 8080
            initialDelaySeconds: 30
            periodSeconds: 10
          resources:
            requests:
              memory: 400Mi
              cpu: 400m
            limits:
              memory: 400Mi
              cpu: 400m
          volumeMounts:
            - name: pvcmain-was
              mountPath: /opt/tomcat/webapps/ROOT
      volumes:
        - name: pvcmain-was
          persistentVolumeClaim:
            claimName: nfs-claim
      nodeSelector:
        main-was: main-app-was-2a

---

apiVersion: v1
kind: PersistentVolume
metadata:
  name: nfs-pv
spec:
  capacity:
    storage: 5Gi
  accessModes:
    - ReadWriteMany
  persistentVolumeReclaimPolicy: Retain
  storageClassName: nfs-sc
  nfs:
    path: /data/tomcat  # NFS 서버에서 공유하는 경로
    server: nfs-server.example.com  # 또는 IP 주소 (dns 전체로 넣어주기)

---

apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: nfs-claim
spec:
  accessModes:
    - ReadWriteMany
  storageClassName: nfs-sc
  resources:
    requests:
      storage: 5Gi

---

apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  name: nfs-sc
provisioner: example.com/nfs

